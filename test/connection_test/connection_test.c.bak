#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

//For Apache over INS
#define REMOTE_IP "10.30.30.138"

//For plain apache on PVM
//define REMOTE_IP "10.30.30.12"

#define REMOTE_PORT 80

int num_conn = 0;


typedef struct thread_info_t {
    pthread_t thread_id;
    int t_num;
    int port;
} thread_info;


static void *
thread_func( void *arg )
{
    struct sockaddr_in conn_addr = {0};
    int conn_fd = -1;
    int err = 0;
    thread_info *t_info = ( thread_info *) arg;

    #include<sys/time.h>
    struct timeval start_time, end_time, res = {0};
    
    conn_fd = socket( AF_INET, SOCK_STREAM, 0 );
    if( conn_fd < 0 ) 
    { 
        perror( "SOCKET_ERROR" );
        printf("Socket Error: Thread: %d\n", t_info->t_num );
        fflush(stdout);
        fflush(stderr); 
        goto ErrorExit;
    }

//    printf( "Created socket for thread %d\n", t_info->t_num);


    conn_addr.sin_family = AF_INET;
    conn_addr.sin_addr.s_addr = inet_addr( REMOTE_IP );
    conn_addr.sin_port = htons( REMOTE_PORT );

    gettimeofday( &start_time, NULL );

    err = connect( conn_fd, ( struct sockaddr* ) &conn_addr, sizeof( conn_addr ) );

    gettimeofday( &end_time, NULL );
    timersub( &end_time, &start_time, &res );
    printf( "thread: %d, connect: %ld sec %ld usec\n",
            t_info->t_num, res.tv_sec, res.tv_usec );
    fflush(stdout);
    
    if( err ) 
    { 
        perror("CONNECT ERROR");
        printf("Errno: %d\n", errno );
        printf( "thread: %d, local_fd: %d\n", t_info->t_num, conn_fd ); 
        fflush(stdout);
        fflush(stderr);
        goto ErrorExit;
    }
//    printf( "Connect succeded for thread %d\n", t_info->t_num );
    
    sleep(10);

//    printf("Thread %d Exiting\n", t_info->t_num );


ErrorExit:
    
    if( conn_fd > 0 )
    {
        shutdown( conn_fd, SHUT_RDWR );
        close( conn_fd );
    }

    return NULL;
}



int
main( int argc, const char* argv[] )
{
    printf("Listening on multiple ports to test multi-ins functinality\n\n");
    
    if( NULL == argv[1] )
    {
        printf(" Please input number of connections\n ");
        return -1;
    }

    printf("Running %s connections\n", argv[1] );

    num_conn = strtol( argv[1], NULL, 10 );
    
    thread_info *t_info = NULL;
    t_info = ( thread_info * ) malloc( sizeof( thread_info ) * num_conn );
    
    for( int i = 0; i < num_conn; i++ )
    {
        t_info[i].t_num = i;
        pthread_create( &t_info[i].thread_id, NULL,
                        &thread_func, (void *) &t_info[i] );
    }

    for( int i = 0; i < num_conn; i++ )
    {
        pthread_join( t_info[i].thread_id, NULL );
    }

    printf("Program finished\n");
}


