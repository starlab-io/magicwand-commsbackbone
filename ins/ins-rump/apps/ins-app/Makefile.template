##
## STAR LAB PROPRIETARY & CONFIDENTIAL
## Copyright (C) 2016, Star Lab â€” All Rights Reserved
## Unauthorized copying of this file, via any medium is strictly prohibited.
##

##
## To preserve changes to Makefile, edit Makefile.template
## See also: utils/mw_prep
##
## THIS MAKEFILE IS THE ONE THE UP-CHAIN DEVELOPERS (OUR CONSUMERS)
## WILL USE. IT MUST BUILD PRODUCTION-READY BINARIES.
##

##
## NOTICE: If you compiled rump from a git branch, the rump binaries
## were put into a directory whose name is branch-dependent. Adjust
## your PATH accordingly.
##

CC = x86_64-rumprun-netbsd-gcc
MAKE = make

CFLAGS = -std=gnu99 -Wall -Wno-missing-braces
CFLAGS += -ggdb

MWROOT = ../../../..

CFLAGS += -I..
CFLAGS += -I$(MWROOT)/common
CFLAGS += -I$(MWROOT)/exports/imports
CFLAGS += -I../platform/xen/xen/include
CFLAGS += -I../../rump-common
CFLAGS += -I../lib/npfctl

CFLAGS += -DLOG_LEVEL=LOG_ERROR
#CFLAGS += -DMYDEBUG #enable debug_print_state
#CFLAGS += -DMYTRAP
#CFLAGS += -DNODEVICE

# Experimental feature: breaks protected app
CFLAGS += -DMODIFY_NETWORK_PARAMETERS=0

BAKE=rumprun-bake
BAKE_FLAGS=-c ../xenevents.conf xen_events

# For testing without /dev/xe
#BAKE_FLAGS=xen_pv

# For testing outside of Rump, use Makefile.util

APPNAME = ins-rump

SRC = xenevent.c networking.c workqueue.c pollset.c logging.c


LIBDIR = ../lib/npfctl
LDFLAGS= -L$(LIBDIR) -lnpfctl -lutil -lnpf -lprop -lpcap
LIB = libnpfctl

all: $(APPNAME).run

# We can call rumprun-bake in the most annoying manner possible;
# but it shows exactly what the bake script is doing. Here's how:
# bash -x `which $(BAKE)` $(BAKE_FLAGS) $@ $^ $(ARCHIVES)
#
# Direct running instrutions:
#
#rumprun -S xen -di                 \
#        -b ./images/data.iso,/data \
#        -M 512                     \
#        -N mw-ins-rump             \
#        -I "xen0,xenif"            \
#        -W xen0,inet,dhcp          \
#        ins-rump-run
#
# N.B. Calling rumprun with -d works here, but it doesn't work with
# thread_app. Why?

$(APPNAME).run: $(APPNAME).bin
	$(BAKE) $(BAKE_FLAGS) $@ $^
	genisoimage -l -r -o ./images/data.iso ./images/data
	@echo "Start INS instance with: ./run.sh"
	@echo "Or debug with GDB using: ./run.sh -g"
	@echo "Start GDB with: gdb -ex 'target remote localhost:1234' $@"

$(APPNAME).bin: $(SRC) $(LIB)
	$(CC) $(CFLAGS) -o $@ $(SRC) $(LDFLAGS)

$(LIB):
	$(MAKE) -C $(LIBDIR)

clean:
	rm -f $(APPNAME).run $(APPNAME).bin *.o
	$(MAKE) -C $(LIBDIR) clean
