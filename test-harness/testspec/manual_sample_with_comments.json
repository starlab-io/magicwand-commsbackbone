{
    "id": 0, //id of this test spec
    "comment": "This is a test that does some stuff and does some other stuff", 
    "tags": [ //for searching, filtering, etc
        "http", 
        "wbradmoore", 
        "bad_network", 
        "slowloris"
    ], 
    "server": { //server isn't specified here, but rather plugged in to this test from elsewhere. however, the server's "half" of the network connection (as in david's "Data Generation Framework.docx") is specified here, and serviced required of the server noted.
        "comment": "a server on a crappy connection",
        "services": [
            "http", 
            "nodejs_tcp_stream"
        ], 
        "latency_ms_mean": 910, //mean latency of server's "half" of the network
        "latency_ms_stdev": 267, //standard deviation (assumed normal distribution?)
        "bandwidth_kbits_mean": 99801, //etc....
        "bandwidth_kbits_stdev": 14229, 
        "corrupted_packet_probability": 0, 
        "dropped_packet_probability": 0.0001, 
        "duplicated_packet_probability": 0
    }, 
    "clients": [ //both normal clients and attackers are represented as clients. whether or not they are malicious is determined by their docker image. I expect clients to be stored as a directory full of buildable docker images, e.g. Clients/{http_client,cat_on_keyboard_http_client,tcp_streamer}/Dockerfile
        {
            "id": 0, 
            "comment": "this client is meant to emulate a 12 year old browsing minecraft forums on a shoddy wifi connection to a robustly connected AP, or something", 
            "type": "http", //the service the client will be using
            "docker_image": "multi-session-browser", //the docker image used for the client
            "options": [], //options for the docker. it appears passing environment variables is accepted best practice for docker. for example, see samples in magic{client,server}/README.md
            "latency_ms_mean": 552, //for this client's "half" of the network
            "latency_ms_stdev": 162, //etc...
            "bandwidth_kbits_mean": 85075, 
            "bandwidth_kbits_stdev": 3734, 
            "corrupted_packet_probability": 0.0001, 
            "dropped_packet_probability": 0.001, 
            "duplicated_packet_probability": 0.0002
        }, 
        {
            "id": 1, 
            "comment": "this client is meant to emulate a 13 year old browsing minecraft forums on a shoddy wifi connection to a robustly connected AP, or something", 
            "type": "http", 
            "docker_image": "multi-session-browser", 
            "options": [], 
            "latency_ms_mean": 552, 
            "latency_ms_stdev": 162, 
            "bandwidth_kbits_mean": 85075, 
            "bandwidth_kbits_stdev": 3734, 
            "corrupted_packet_probability": 0.0001, 
            "dropped_packet_probability": 0.001, 
            "duplicated_packet_probability": 0.0002
        }, 
        {
            "id": 2, 
            "comment": "this client is meant to emulate a 20 year old browsing minecraft forums on a shoddy wifi connection to a robustly connected AP, or something", 
            "type": "http", 
            "docker_image": "multi-session-browser", 
            "options": [], 
            "latency_ms_mean": 552, 
            "latency_ms_stdev": 162, 
            "bandwidth_kbits_mean": 85075, 
            "bandwidth_kbits_stdev": 3734, 
            "corrupted_packet_probability": 0.0001, 
            "dropped_packet_probability": 0.001, 
            "duplicated_packet_probability": 0.0002
        }, 
        {
            "id": 666, 
            "comment": "THIS IS AN ATTACKER that starts out as an http browser", 
            "type": "http", 
            "docker_image": "single-session-browser-becomes-slowloris", 
            "options": ["attackstart=60"], 
            "latency_ms_mean": 753, 
            "latency_ms_stdev": 252, 
            "bandwidth_kbits_mean": 60269, 
            "bandwidth_kbits_stdev": 20836, 
            "corrupted_packet_probability": 0.0001, 
            "dropped_packet_probability": 0.001, 
            "duplicated_packet_probability": 0.0002
        }
    ], 
    "monitors": [ //I am imagining a folder full of monitors. Monitors are either 1) binaries, or 2) folders containing Dockerfiles.
        {
            "id": 0, //each running external monitor will have an id. presumably servers will have their own monitors that are always on, but it seems to me that managing those monitors from a test spec would introduce complexity without benefit - it seems one would never have reason to delay starting those internal monitors from spin-up.
            "comment": "this is the thing that looks at timings of tcp responses based on seq/ack numbers...protocol agnostic", 
            "name": "tcp_timing", //the name of the monitor. if monitor is a docker image, the name of the folder from which it can be built. otherwise, the name of the binary.
            "is_docker":false, //if 'true', then "name" field is effectively a "docker_image" field
            "options": ["measurement_frequency_ms=1000"], //monitor-specific options
            "monitored_client_ids": [ //clients to monitor. efor e.g. when only certain clients are using the protocol the monitor...monitors.
                0, 
                666
            ]
        }
    ], 
    "schedule": { //simply a comment field if needed, and a list of events. not keyed by time, in order to simplify having concurrent events
        "comment": "this is a short test with a certain schedule of events that repesents an attack during a busy ticketmaster sale",
        "events": [
            {
                "time": 0,
                "component": "server", //{server,clients,monitors,all}
                "comment": "apache ho!", 
                "action": "start", //{start,stop,update} *update = e.g. telling a client to start behaving badly
                "options": [], //i anticipate this would only be used for updates
                "ids": []
            }, 
            {
                "time": 2,
                "component": "monitor", 
                "comment": "this is to launch monitors", 
                "action": "start", 
                "options": [],
                "ids": [
                    "all"
                ]
            }, 
            {
                "time": 10,
                "component": "client", 
                "comment": "this is to launch clients 0 and 1", 
                "action": "start", 
                "options": [],
                "ids": [
                    0,
                    1
                ]
            }, 
            {
                "time": 20,
                "component": "client", 
                "comment": "this is to launch slowloris", 
                "action": "start", 
                "options": [],
                "ids": [
                    666
                ]
            }, 
            {
                "time": 30,
                "component": "client", 
                "comment": "this is to launch the rest of the clients", 
                "action": "start", 
                "options": [],
                "ids": [
                    "all"
                ]
            }, 
            {
                "time": 120,
                "component": "all", 
                "comment": "this is to tear down", 
                "action": "stop", 
                "options": [],
                "ids": []
            }
        ]
    }
}